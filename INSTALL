=== Rubygems

The current version of rq runs on ruby1.8. A gem is available on rubygems:

  https://rubygems.org/gems/rq-ruby1.8

install with

  gem1.8 install rq-ruby1.8

which should include:

  - gem1.8 install posixlock
  - gem1.8 install arrayfields
  - gem1.8 install lockfile

sqlite-1.3.1, however, is not on rubygems, so you may need to:

  - install sqlite2 (Debian apt-get install libsqlite0-dev)
  - wget http://rubyforge.org/frs/download.php/1070/sqlite-1.3.1.gem
  - gem1.8 install sqlite-1.3.1.gem
  - gem1.8 install rq-ruby1.8 (or run from source)

  Also available from http://bio4.dnsalias.net/download/gem/ruby1.8/

run with, for example

  ln -s /var/lib/gems/1.8/gems/rq-ruby1.8-3.4.3/bin/rq /usr/local/bin/rq
  rq --help

=== Debian

On Debian systems, the recommended procedure is to use Debian apt on all 
machines. For now, use the 3.4.3 install, as documented in the README!

This has been tested on Debian Squeeze (BioLinux Minimal):

root@vagrant-debian-squeeze:/home/vagrant#  gem1.8 install rq-ruby1.8
Building native extensions.  This could take a while...
Successfully installed posixlock-0.0.1
Successfully installed arrayfields-4.7.4
Successfully installed lockfile-1.4.3
Successfully installed rq-ruby1.8-3.4.3
4 gems installed
Installing ri documentation for posixlock-0.0.1...
Installing ri documentation for arrayfields-4.7.4...
Installing ri documentation for lockfile-1.4.3...
Installing ri documentation for rq-ruby1.8-3.4.3...
Installing RDoc documentation for posixlock-0.0.1...
Installing RDoc documentation for arrayfields-4.7.4...
Installing RDoc documentation for lockfile-1.4.3...
Installing RDoc documentation for rq-ruby1.8-3.4.3...

  ln -s /var/lib/gems/1.8/gems/rq-ruby1.8-3.4.3/bin/rq /usr/local/bin/rq

apt-get install libsqlite0-dev
  Setting up libsqlite0 (2.8.17-6) ...
  Setting up libsqlite0-dev (2.8.17-6) ...
wget http://rubyforge.org/frs/download.php/1070/sqlite-1.3.1.gem
  Saving to: `sqlite-1.3.1.gem'
  100%[======================================>] 41,278      --.-K/s   in 0.1s    
  2011-07-21 11:36:21 (347 KB/s) - `sqlite-1.3.1.gem' saved [41278/41278]

root@vagrant-debian-squeeze:/home/vagrant# gem1.8 install sqlite-1.3.1.gem
  Building native extensions.  This could take a while...
  Successfully installed sqlite-1.3.1
  1 gem installed
  Installing ri documentation for sqlite-1.3.1...
  Installing RDoc documentation for sqlite-1.3.1...
root@vagrant-debian-squeeze:/home/vagrant# rq --help
  NAME

    rq v3.4.3

(the end!)

(below will become available later)

  * apt-get install rq-ruby1.8

which resolves all dependencies, or alternatively 

  * Download the rq deb file from http://bio4.dnsalias.net/download/Debian/
  * apt-get install libposixlock-ruby1.8 libsqlite3-ruby1.8 ruby1.8 
  * dpkg --force-architecture -i rq-ruby1.8-ver.deb

which works on on 32-bits and 64-bits systems. The commands

  * rq ~/queue create
  * rq ~/queue status

should show

        jobs: 
          pending: 0
          holding: 0
          running: 0
          finished: 0
          dead: 0
          total: 0
        temporal: {}
        performance: 
          avg_time_per_job: 00h00m00.00s
          n_jobs_in_last_hrs: 
            1: 0
            12: 0
            24: 0
        exit_status: 
          successes: 0
          failures: 0
          ok: 0

=== NFS central

The second option is to build and install once and distribute through
NFS. Use the tgz installation, which includes an ./all/ directory. On 
modern systems your mileage may vary as the Ruby build breaks on gcc 
version >4.4

  * Unpack rq-ver.tgz file
  
  * cd into ./all/

  * ./install.sh /full/path/to/a/nfs/mounted/directory/

  * the nfs mounted path above should be visible by all cluster nodes.
    __all__ required software will be installed into this directory root. when
    complete all that's needed is a

      export PATH=/full/path/to/a/nfs/mounted/directory/bin:$PATH

    (note 'bin') to use rq

  * this is the second best procedure since it will result in a single nfs
    install which all cluster nodes can use. The other install methods mean
    you will have to install rq on __each__ node you plan to use it on.

=== RUBYGEMS

(currently defunct, awaits updating rq to Ruby 1.9.x and sqlite3)

  * gem install rq

=== STANDARD

(in rq version <=3.4.0)

  * install all packages in ./depends/packages manually

  * ruby install.rb

=== From source (github)

The current version of rq runs on ruby1.8, using bundler and jeweler:

  gem1.8 install bundler
  Successfully installed bundler-1.0.15

  gem1.8 install jeweler
  Successfully installed jeweler-1.6.4
 
  git clone https://pjotrp@github.com/pjotrp/rq.git
  cd rq/
  rake gemspec
  rake build  # creates gem in ./pkg

